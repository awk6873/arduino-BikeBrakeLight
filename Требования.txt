Требования
1.Минимальное потребление CPU
  1.1.Sleep режим при отсутствии значений от MPU по всем осям акселя выше порога в течение 5 мин,
    выход из режима через прерывание Wake-on-Motion от MPU.
  1.2.Режим пониженного потребления в рабочем цикле - ???
+ 1.3.Убрать PWR светик с прод-платы.
+ 1.4.Потребление в режиме STANDBY:
      20 мкA - ArduinoLowPower sleep(), библиотека как есть, светик отключен
+ 1.5.Замерить потребление фонаря в дежурном режиме
      60 мкА 
  1.6.Перифер.устройства отключить по максимуму
  1.7.Watchdog таймер - поставить на макс.большой период
2.Минимальное потребление MPU
+ 3.Для отладки подключить LCD к CPU по I2C
4.Калибровка акселя - в отдельном режиме с сохранением значений в EEPROM CPU
5.Автокалибровка гиро в процессе работы
6.ФНЧ для акселя, интегрирование или усреднение?
7.Матрица ориентации MPU (или явно в коде указывать, какая из осей будет направлена вниз, какая вдоль оси?)
  7.1.Разобраться с порядком передачи значений в функцию вычисления кватерниона (NEU - "north east up" и т.д.), см. quaternion_compass.
8.При вычислении значений по осям без учета гравитации какой вектор вычитать из повернутого в систему координат Земли?
9.Для настройки чувствительности в тестовом режиме временно подключить потенциометр к A0


Проблемы
1.MPU не выходит из режима Wake-on-Motion
  1.1.Проверить установки регистров при переводе в режим Wake-on-Motion
  1.2.Сделать сброс MPU после выхода CPU из режима STANDBY (i2c функции не работают!)
+ 2.После выхода CPU из режима STANDBY не работает Serial (сделать отладочный вывод по I2C на LCD)
3.Дрейф кватерниона по оси Z ~100% за 12 ч. Почему не работает автокалибровка гироскопа?
4.Ошибка MPU update после включения

